/* 思路：此题由于是判断是否为4的幂，我们可以用一直取模一直除以4的方法来进行操作不过此时的时间复杂度就为o(log(4)n)，
由于是判断是否为4的幂，4的幂一定为2的幂，所以我们可以先判断是否为2的幂，2的幂有什么特点呢？，
2的幂在二进制中表示为最高位为0（一定为正），其余为有且仅有一位为1，其余都为0，
所以我们只需要将这个数字与他减一后的数字进行与运算就可以判断是否为2的幂了（n&(n - 1)，大家可以这样理解，
不管对于n中最后一个一的位置如何比如为....1000...（N个）假设1的后面有N个0，
对于该数字减一而言就变成了....01111....(N个)后面的0全部就因为借位变成了1，此时将两个数字相与就会把最后一个1之后（包括1）
全部变成了0.所以我们消去一个1之后如果还有1 那么这个数一定不为0，所以只需要进行与运算之后判断是否为0即可），
此时得到的值一定就为2的幂了，然后我们再判断是否为4的幂，4 = 2 * 2; 所以4的幂一定有偶数个2，
偶数个2相乘也一定可以得到4的幂，对于数字n而言，我们每次乘2其本质是将他的二进制数字向左移动1（左移后右边的数字补0）
，若我们领数字n = 1(也就是4的0次方)如果乘以偶数个2的话，那么那个一的位置一定在奇数位上面（每乘以4就向左移动两位），
所以我们只需要判断这个数字的1是否在奇数位上即可，判断方法也可以一位一位进行遍历。但是我们可以采用与运算的方式，
即我们与‭01010101010101010101010101010101‬（二进制）进行与运算（与运算 相同为1不同为0）所以这样与运算后，
如果那个1在偶数位上，那么他们刚好错开了结果就为0，如果在奇数位上其结果就不为0.有人可能会问为什么要先判断是否为2的幂呢，因为我们最后判断4的幂的时候要保证他只有一位为1才可以这样判断。*/
class Solution {
public:
	bool isPowerOfFour(int num) {
		if (num < 0 || (num&(num - 1)) != 0) return false;
		return (num&(0x55555555)) != 0;
	}
};